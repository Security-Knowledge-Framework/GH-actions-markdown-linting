name: Markdown Lint Check

on:
  workflow_call:
    inputs:
      ref:
        description: 'Branch or tag ref to checkout'
        required: true
        type: string
      repository:
        description: 'Repository to checkout'
        required: true
        type: string
    secrets:
      token:
        description: 'Github token to use for comments'
        required: true

jobs:
- name: Create check run
  id: create_check
  uses: actions/github-script@v6
  with:
    github-token: ${{ secrets.GITHUB_TOKEN }}
    result-encoding: string
    script: |
      const result = await github.rest.checks.create({
        owner: context.repo.owner,
        repo: context.repo.repo,
        name: 'Linting',
        head_sha: context.sha,
        status: 'in_progress',
        started_at: new Date()
      });
      return result.data.id;

- name: Run linter
  run: |
    npm install -g markdownlint-cli
    markdownlint ./repo --config ./workflow-repo/.github/configs/.markdownlint.json --ignore node_modules --ignore .github &> lint.txt
  continue-on-error: true
  working-directory: ${{github.workspace}}

- name: Update check run
  if: always()
  uses: actions/github-script@v6
  with:
    github-token: ${{ secrets.GITHUB_TOKEN }}
    script: |
      const fs = require("fs");
      const lintPath = `${process.env.GITHUB_WORKSPACE}/lint.txt`;
      const lintString = fs.readFileSync(lintPath).toString().trimEnd();

      let conclusion = 'success';
      let output = {
        title: 'Linting Results',
        summary: 'No issues found.'
      };

      if (lintString) {
        conclusion = 'failure';
        output = {
          title: 'Linting Results',
          summary: 'Issues found.',
          text: lintString
        };
      }

      await github.rest.checks.update({
        owner: context.repo.owner,
        repo: context.repo.repo,
        check_run_id: ${{ steps.create_check.outputs.result }},
        status: 'completed',
        conclusion: conclusion,
        completed_at: new Date(),
        output: output
      });
    
