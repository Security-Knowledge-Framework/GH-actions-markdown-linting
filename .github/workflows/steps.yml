name: Markdown Lint Check

on:
  workflow_call:
    inputs:
      ref:
        description: 'Branch or tag ref to checkout'
        required: true
        type: string
      repository:
        description: 'Repository to checkout'
        required: true
        type: string
    secrets:
      token:
        description: 'Github token to use for comments'
        required: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout caller repository
      uses: actions/checkout@v3
      with:
        ref: ${{inputs.ref}}
        repository: ${{inputs.repository}}
        path: 'repo'

    - name: Checkout workflow repository
      uses: actions/checkout@v3
      with:
        repository: 'Security-Knowledge-Framework/GH-actions-markdown-linting' # The repository hosting the reusable workflow
        path: 'workflow-repo'

    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: Create check run
      id: create_check
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.token }}
        result-encoding: string
        script: |
          const result = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Linting',
            head_sha: context.sha,
            status: 'in_progress',
            started_at: new Date()
          });
          return result.data.id;

    - name: Run linter
      run: |
        npm install -g markdownlint-cli
        markdownlint ./repo --config ./workflow-repo/.github/configs/.markdownlint.json --ignore node_modules --ignore .github &> lint.txt
      continue-on-error: true
      working-directory: ${{github.workspace}}

    - name: Update check run
      if: always()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.token }}
        script: |
          const fs = require("fs");
          const lintPath = `${process.env.GITHUB_WORKSPACE}/lint.txt`;
          const lintString = fs.readFileSync(lintPath).toString().trimEnd();

          let conclusion = 'success';
          let output = {
            title: 'Linting Results',
            summary: 'No issues found.'
          };

          if (lintString) {
            conclusion = 'failure';
            output = {
              title: 'Linting Results',
              summary: 'Issues found.',
              text: lintString
            };
          }

          await github.rest.checks.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            check_run_id: ${{ steps.create_check.outputs.result }},
            status: 'completed',
            conclusion: conclusion,
            completed_at: new Date(),
            output: output
          });
